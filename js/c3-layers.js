// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  c3.Plot.Layer = (function() {
    Layer.version = 0.2;

    c3.Layer = Layer;

    Layer.prototype.type = 'layer';

    Layer._next_uid = 0;

    Layer.prototype.data = void 0;

    Layer.prototype.name = void 0;

    Layer.prototype["class"] = void 0;

    Layer.prototype.static_data = false;

    Layer.prototype.h = void 0;

    Layer.prototype.v = void 0;

    Layer.prototype.x = void 0;

    Layer.prototype.y = void 0;

    Layer.prototype.h_orient = void 0;

    Layer.prototype.v_orient = void 0;

    Layer.prototype.options = void 0;

    Layer.prototype.handlers = void 0;

    function Layer(opt) {
      this.max_y = bind(this.max_y, this);
      this.min_y = bind(this.min_y, this);
      this.max_x = bind(this.max_x, this);
      this.min_x = bind(this.min_x, this);
      this.scale = bind(this.scale, this);
      this.redraw = bind(this.redraw, this);
      this.pan = bind(this.pan, this);
      this.zoom = bind(this.zoom, this);
      this.style = bind(this.style, this);
      this.draw = bind(this.draw, this);
      this.update = bind(this.update, this);
      this.size = bind(this.size, this);
      this.init = bind(this.init, this);
      c3.util.extend(this, new c3.Dispatch);
      c3.util.extend(this, opt);
      this.uid = c3.Plot.Layer._next_uid++;
    }

    Layer.prototype.init = function(chart, g) {
      var event, handler, prototype, ref;
      this.chart = chart;
      this.g = g;
      this.trigger('render_start');
      if (this.data == null) {
        this.data = this.chart.data;
      }
      if (this.h == null) {
        this.h = this.chart.h;
      }
      if (this.v == null) {
        this.v = this.chart.v;
      }
      if (this.x == null) {
        this.x = this.chart.x;
      }
      if (this.y == null) {
        this.y = this.chart.y;
      }
      if (this.h_orient == null) {
        this.h_orient = this.chart.h_orient;
      }
      if (this.v_orient == null) {
        this.v_orient = this.chart.v_orient;
      }
      if (this["class"] != null) {
        this.g.classed(this["class"], true);
      }
      if (this.handlers != null) {
        ref = this.handlers;
        for (event in ref) {
          handler = ref[event];
          this.on(event, handler);
        }
      }
      this.content = c3.select(this.g);
      prototype = Object.getPrototypeOf(this);
      while (prototype) {
        if (prototype.type != null) {
          this.g.classed(prototype.type, true);
        }
        prototype = Object.getPrototypeOf(prototype);
      }
      if (typeof this._init === "function") {
        this._init();
      }
      return this.trigger('render');
    };

    Layer.prototype.size = function(width1, height1) {
      this.width = width1;
      this.height = height1;
      this.trigger('resize_start');
      if (this.h_orient !== this.chart.h_orient && this.h === this.chart.h) {
        this.h = this.h.copy();
      }
      c3.d3.set_range(this.h, this.h_orient === 'left' ? [0, this.width] : [this.width, 0]);
      if (this.v_orient !== this.chart.v_orient && this.v === this.chart.v) {
        this.v = this.v.copy();
      }
      c3.d3.set_range(this.v, this.v_orient === 'bottom' ? [this.height, 0] : [0, this.height]);
      if (typeof this._size === "function") {
        this._size();
      }
      return this.trigger('resize');
    };

    Layer.prototype.update = function(origin) {
      if (this.chart == null) {
        throw Error("Attempt to redraw uninitialized plot layer, please use render() when modifying set of layers.");
      }
      this.trigger('redraw_start', origin);
      return typeof this._update === "function" ? this._update(origin) : void 0;
    };

    Layer.prototype.draw = function(origin) {
      if (!(this.static_data && origin === 'redraw')) {
        if (origin === 'resize') {
          this.trigger('redraw_start', origin);
        }
        if (typeof this._draw === "function") {
          this._draw(origin);
        }
        return this.trigger('redraw', origin);
      }
    };

    Layer.prototype.style = function(style_new) {
      this.trigger('restyle_start', style_new);
      if (typeof this._style === "function") {
        this._style(style_new);
      }
      this.trigger('restyle', style_new);
      if (!this.rendered) {
        this.trigger('rendered');
      }
      return this;
    };

    Layer.prototype.zoom = function() {
      if (typeof this.draw === "function") {
        this.draw('zoom');
      }
      return typeof this.style === "function" ? this.style(true) : void 0;
    };

    Layer.prototype.pan = function() {
      if (typeof this.draw === "function") {
        this.draw('pan');
      }
      return typeof this.style === "function" ? this.style(true) : void 0;
    };

    Layer.prototype.redraw = function(origin) {
      if (origin == null) {
        origin = 'redraw';
      }
      this.update(origin);
      this.draw(origin);
      this.style(true);
      return this;
    };

    Layer.prototype.restyle = Layer.prototype.style;

    Layer.prototype.scale = function() {
      var h_domain, refresh, v_domain;
      refresh = false;
      if (this.h_domain != null) {
        if (this.h === this.chart.h) {
          throw Error("Layer cannot scale shared h scale, please define just h or both h and h_domain for layers");
        }
        h_domain = typeof this.h_domain === 'function' ? this.h_domain.call(this) : this.h_domain;
        if (h_domain[0] === 'auto') {
          h_domain[0] = this.min_x();
        }
        if (h_domain[1] === 'auto') {
          h_domain[1] = this.max_x();
        }
        if (h_domain[0] !== this.h.domain()[0] || h_domain[1] !== this.h.domain()[1]) {
          this.h.domain(h_domain);
          refresh = true;
        }
      }
      if (this.v_domain != null) {
        if (this.v === this.chart.v) {
          throw Error("Layer cannot scale shared v scale, please define just v or both v and v_domain for layers");
        }
        v_domain = typeof this.v_domain === 'function' ? this.v_domain.call(this) : this.v_domain;
        if (v_domain[0] === 'auto') {
          v_domain[0] = this.min_y();
        }
        if (v_domain[1] === 'auto') {
          v_domain[1] = this.max_y();
        }
        if (v_domain[0] !== this.v.domain()[0] || v_domain[1] !== this.v.domain()[1]) {
          this.v.domain(v_domain);
          refresh = true;
        }
      }
      return refresh;
    };

    Layer.prototype.min_x = function() {
      if (this.x != null) {
        return d3.min(this.data, this.x);
      }
    };

    Layer.prototype.max_x = function() {
      if (this.x != null) {
        return d3.max(this.data, this.x);
      }
    };

    Layer.prototype.min_y = function() {
      if (this.y != null) {
        return d3.min(this.data, this.y);
      }
    };

    Layer.prototype.max_y = function() {
      if (this.y != null) {
        return d3.max(this.data, this.y);
      }
    };

    return Layer;

  })();

  c3.Plot.Layer.Stackable = (function(superClass) {
    extend(Stackable, superClass);

    function Stackable() {
      this.max_y = bind(this.max_y, this);
      this.min_y = bind(this.min_y, this);
      this.max_x = bind(this.max_x, this);
      this.min_x = bind(this.min_x, this);
      this._style = bind(this._style, this);
      this._update = bind(this._update, this);
      this._stack = bind(this._stack, this);
      return Stackable.__super__.constructor.apply(this, arguments);
    }

    Stackable.version = 0.2;

    Stackable.prototype.type = 'stackable';

    Stackable.prototype.stack_options = void 0;

    Stackable.prototype.stacks = void 0;

    Stackable.prototype.safe = true;

    Stackable.prototype._stack = function() {
      var add_value, base, datum, i, j, k, key, l, layer_h, len, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, stack, stack_h, stack_index, stack_map, stacker, t, u, undef, v, value, w, x_values, x_values_set, z;
      if (this.stack_options || (this.stacks != null)) {
        if (this.stacks == null) {
          this.stacks = [];
        }
        x_values_set = {};
        add_value = (function(_this) {
          return function(stack, datum, i, j) {
            var ref, x, y;
            x = _this.x(datum, i);
            x_values_set[x] = x;
            stack.y = (function() {
              var ref1;
              if ((ref = (ref1 = stack.y) != null ? ref1 : this.y) != null) {
                return ref;
              } else {
                throw Error("Y accessor must be defined in stack, layer, or chart");
              }
            }).call(_this);
            y = stack.y(datum, i, j, stack);
            return stack.values.push({
              x: x,
              y: y,
              datum: datum
            });
          };
        })(this);
        ref = this.stacks;
        for (j = l = 0, len = ref.length; l < len; j = ++l) {
          stack = ref[j];
          if (stack.name == null) {
            stack.name = (ref1 = this.stack_options) != null ? typeof ref1.name === "function" ? ref1.name(stack.key) : void 0 : void 0;
          }
          stack.values = [];
          if (stack.data != null) {
            ref2 = stack.data;
            for (i = m = 0, len1 = ref2.length; m < len1; i = ++m) {
              datum = ref2[i];
              add_value(stack, datum, i, j);
            }
          }
        }
        if (this.current_data.length) {
          if (((ref3 = this.stack_options) != null ? ref3.key : void 0) != null) {
            stack_map = {};
            stack_index = {};
            ref4 = this.stacks;
            for (j = n = 0, len2 = ref4.length; n < len2; j = ++n) {
              stack = ref4[j];
              if (stack_map[stack.key] != null) {
                throw Error("Stacks provided with duplicate keys: " + stack.key);
              }
              stack_map[stack.key] = stack;
              stack_index[stack.key] = j;
            }
            ref5 = this.current_data;
            for (i = o = 0, len3 = ref5.length; o < len3; i = ++o) {
              datum = ref5[i];
              key = this.stack_options.key(datum);
              if (stack_map[key] != null) {
                stack = stack_map[key];
                j = stack_index[key];
              } else {
                this.stacks.push(stack = stack_map[key] = {
                  key: key,
                  name: typeof (base = this.stack_options).name === "function" ? base.name(key) : void 0,
                  current_data: [],
                  values: []
                });
                j = this.stacks.length;
              }
              add_value(stack, datum, i, j);
            }
          } else if (this.stacks != null) {
            ref6 = this.stacks;
            for (j = p = 0, len4 = ref6.length; p < len4; j = ++p) {
              stack = ref6[j];
              ref7 = this.current_data;
              for (i = q = 0, len5 = ref7.length; q < len5; i = ++q) {
                datum = ref7[i];
                add_value(stack, datum, i, j);
              }
            }
          } else {
            throw Error("Either stacks or stack_options.key must be defined to create the set of stacks.");
          }
        }
        if (this.safe) {
          if (this.h.range()[0] === this.h.range()[1]) {
            this.h.range([0, 1]);
          }
          x_values = c3.array.sort_up((function() {
            var results;
            results = [];
            for (k in x_values_set) {
              v = x_values_set[k];
              results.push(v);
            }
            return results;
          })(), this.h);
          ref8 = this.stacks;
          for (r = 0, len6 = ref8.length; r < len6; r++) {
            stack = ref8[r];
            c3.array.sort_up(stack.values, (function(_this) {
              return function(v) {
                return _this.h(v.x);
              };
            })(this));
          }
          i = 0;
          while (i < x_values.length) {
            undef = 0;
            ref9 = this.stacks;
            for (t = 0, len7 = ref9.length; t < len7; t++) {
              stack = ref9[t];
              stack_h = this.h((ref10 = stack.values[i]) != null ? ref10.x : void 0);
              layer_h = this.h(x_values[i]);
              if (stack_h !== layer_h) {
                if (stack_h < layer_h) {
                  if (this.h.domain()[0] === this.h.domain()[1]) {
                    throw Error("Did you intend for an h scale with 0 domain?  Duplicate X values, invalid stacking, or bad h scale");
                  } else {
                    throw Error("Multiple data elements with the same x value in the same stack, or invalid stacking");
                  }
                }
                stack.values.splice(i, 0, {
                  x: x_values[i],
                  y: 0,
                  datum: null
                });
                undef++;
              } else if (stack.values[i].y == null) {
                stack.values[i].y = 0;
                undef++;
              }
            }
            if (undef === this.stacks.length) {
              ref11 = this.stacks;
              for (u = 0, len8 = ref11.length; u < len8; u++) {
                stack = ref11[u];
                stack.values.splice(i, 1);
              }
              x_values.splice(i, 1);
              i--;
            }
            i++;
          }
        }
        ref12 = this.stacks;
        for (w = 0, len9 = ref12.length; w < len9; w++) {
          stack = ref12[w];
          stack.current_data = stack.values.map(function(v) {
            return v.datum;
          });
        }
        if (((ref13 = this.stack_options) != null ? ref13.offset : void 0) === 'none') {
          ref14 = this.stacks;
          results = [];
          for (z = 0, len10 = ref14.length; z < len10; z++) {
            stack = ref14[z];
            results.push((function() {
              var i1, len11, ref15, results1;
              ref15 = stack.values;
              results1 = [];
              for (i1 = 0, len11 = ref15.length; i1 < len11; i1++) {
                value = ref15[i1];
                results1.push(value.y0 = 0);
              }
              return results1;
            })());
          }
          return results;
        } else {
          stacker = d3.layout.stack().values(function(stack) {
            return stack.values;
          });
          if (((ref15 = this.stack_options) != null ? ref15.offset : void 0) != null) {
            stacker.offset(this.stack_options.offset);
          }
          if (((ref16 = this.stack_options) != null ? ref16.order : void 0) != null) {
            stacker.order(this.stack_options.order);
          }
          return stacker(this.stacks);
        }
      }
    };

    Stackable.prototype._update = function() {
      var d, i, ref, ref1, ref2, ref3, v, values;
      this.current_data = !this.safe ? this.data : this.data != null ? (this.y != null) && (this.stacks == null) && (this.stack_options == null) ? (values = (function() {
        var l, len, ref, results;
        ref = this.data;
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          d = ref[i];
          results.push({
            x: this.x(d, i),
            y: this.y(d, i),
            datum: d
          });
        }
        return results;
      }).call(this), c3.array.sort_up(values, (function(_this) {
        return function(v) {
          return _this.h(v.x);
        };
      })(this)), (function() {
        var l, len, results;
        results = [];
        for (l = 0, len = values.length; l < len; l++) {
          v = values[l];
          if ((v.x != null) && (v.y != null)) {
            results.push(v.datum);
          }
        }
        return results;
      })()) : (values = (function() {
        var l, len, ref, results;
        ref = this.data;
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          d = ref[i];
          results.push({
            x: this.x(d, i),
            datum: d
          });
        }
        return results;
      }).call(this), (this.stacks != null) || (this.stack_options != null) ? c3.array.sort_up(values, (function(_this) {
        return function(v) {
          return _this.h(v.x);
        };
      })(this)) : void 0, (function() {
        var l, len, results;
        results = [];
        for (l = 0, len = values.length; l < len; l++) {
          v = values[l];
          if (v.x != null) {
            results.push(v.datum);
          }
        }
        return results;
      })()) : void 0;
      if (this.current_data == null) {
        this.current_data = [];
      }
      this._stack();
      return this.groups = this.content.select('g.stack').bind((ref1 = this.stacks) != null ? ref1 : [null], ((ref2 = this.stacks) != null ? (ref3 = ref2[0]) != null ? ref3.key : void 0 : void 0) == null ? null : function(stack) {
        return stack.key;
      }).options(this.stack_options, (((ref = this.stacks) != null ? ref.some(function(stack) {
        return stack.options != null;
      }) : void 0) ? function(stack) {
        return stack.options;
      } : void 0)).update();
    };

    Stackable.prototype._style = function(style_new) {
      var ref;
      return (ref = this.groups) != null ? ref.style(style_new) : void 0;
    };

    Stackable.prototype.min_x = function() {
      var ref;
      if (this.stacks == null) {
        return Stackable.__super__.min_x.apply(this, arguments);
      } else {
        return d3.min((ref = this.stacks[0]) != null ? ref.values : void 0, function(v) {
          return v.x;
        });
      }
    };

    Stackable.prototype.max_x = function() {
      var ref;
      if (this.stacks == null) {
        return Stackable.__super__.max_x.apply(this, arguments);
      } else {
        return d3.max((ref = this.stacks[0]) != null ? ref.values : void 0, function(v) {
          return v.x;
        });
      }
    };

    Stackable.prototype.min_y = function() {
      if (this.stacks == null) {
        return Stackable.__super__.min_y.apply(this, arguments);
      } else {
        return d3.min(this.stacks, function(stack) {
          return d3.min(stack.values, function(v) {
            return v.y0 + v.y;
          });
        });
      }
    };

    Stackable.prototype.max_y = function() {
      if (this.stacks == null) {
        return Stackable.__super__.max_y.apply(this, arguments);
      } else {
        return d3.max(this.stacks, function(stack) {
          return d3.max(stack.values, function(v) {
            return v.y0 + v.y;
          });
        });
      }
    };

    return Stackable;

  })(c3.Plot.Layer);

  c3.Plot.Layer.Stackable.Stack = (function() {
    Stack.version = 0.1;

    Stack.prototype.key = void 0;

    Stack.prototype.y = void 0;

    Stack.prototype.data = void 0;

    Stack.prototype.name = void 0;

    Stack.prototype.options = void 0;

    function Stack(opt) {
      c3.util.extend(this, opt);
    }

    return Stack;

  })();

  c3.Plot.Layer.Path = (function(superClass) {
    extend(Path, superClass);

    function Path() {
      this.max_x = bind(this.max_x, this);
      this.min_x = bind(this.min_x, this);
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._init = bind(this._init, this);
      return Path.__super__.constructor.apply(this, arguments);
    }

    Path.version = 0.2;

    Path.prototype.type = 'path';

    Path.prototype.path_generator_factory = void 0;

    Path.prototype.interpolate = void 0;

    Path.prototype.tension = void 0;

    Path.prototype.defined = void 0;

    Path.prototype.r = void 0;

    Path.prototype.a = void 0;

    Path.prototype.path_options = void 0;

    Path.prototype.circle_options = void 0;

    Path.prototype.label_options = void 0;

    Path.prototype._init = function() {
      if (this.path_generator_factory == null) {
        throw Error("path_generator_factory must be defined for a path layer");
      }
      return this.path_generator = this.path_generator_factory();
    };

    Path.prototype._update = function(origin) {
      if (origin !== 'zoom') {
        Path.__super__._update.apply(this, arguments);
        this.paths = this.groups.inherit('path.scaled').options(this.path_options);
        if ((this.r != null) || (this.a != null)) {
          this.circles = this.groups.select('circle').options(this.circle_options).animate(origin === 'redraw').bind(this.stacks != null ? function(stack) {
            return stack.current_data;
          } : this.current_data).update();
        }
        if (this.label_options != null) {
          return this.labels = this.groups.select('text').options(this.label_options).animate(origin === 'redraw').bind(this.stacks != null ? function(stack) {
            return stack.current_data;
          } : this.current_data).update();
        }
      }
    };

    Path.prototype._draw = function(origin) {
      var orig_h, ref, ref1, ref2;
      if (origin !== 'zoom') {
        if (this.interpolate != null) {
          this.path_generator.interpolate(this.interpolate);
        }
        if (this.tension != null) {
          this.path_generator.tension(this.tension);
        }
        if (this.defined != null) {
          this.path_generator.defined(this.defined);
        }
        orig_h = (ref = this.chart.orig_h) != null ? ref : this.h;
        this.paths.animate(origin === 'redraw').position({
          d: this.stacks != null ? (function(_this) {
            return function(stack, stack_idx) {
              var base;
              if (typeof (base = _this.path_generator.x(function(d, i) {
                return orig_h(stack.values[i].x);
              }).y(function(d, i) {
                return _this.v(stack.values[i].y0 + stack.values[i].y);
              })).y0 === "function") {
                base.y0((_this.baseline != null) && !stack_idx ? function(d, i) {
                  return _this.v(c3.functor(_this.baseline)(d, i));
                } : function(d, i) {
                  return _this.v(stack.values[i].y0);
                });
              }
              return _this.path_generator(stack.current_data);
            };
          })(this) : (function(_this) {
            return function() {
              var base;
              if (typeof (base = _this.path_generator.x(function(d, i) {
                return orig_h(_this.x(d, i));
              }).y(function(d, i) {
                return _this.v(_this.y(d, i));
              })).y0 === "function") {
                base.y0(_this.baseline != null ? function(d, i) {
                  return _this.v(c3.functor(_this.baseline)(d, i));
                } : _this.height);
              }
              return _this.path_generator(_this.current_data);
            };
          })(this)
        });
      }
      if ((ref1 = this.circles) != null) {
        ref1.animate(origin === 'redraw').position({
          cx: (function(_this) {
            return function(d, i, s) {
              return _this.h(_this.x(d, i, s));
            };
          })(this),
          cy: this.stacks != null ? (function(_this) {
            return function(d, i, s) {
              var values;
              values = _this.stacks[s].values[i];
              return _this.v(values.y + values.y0);
            };
          })(this) : (function(_this) {
            return function(d, i) {
              return _this.v(_this.y(d, i));
            };
          })(this),
          r: this.a == null ? this.r : typeof this.a === 'function' ? (function(_this) {
            return function(d, i, s) {
              return Math.sqrt(_this.a(d, i, s) / Math.PI);
            };
          })(this) : Math.sqrt(this.a / Math.PI)
        });
      }
      return (ref2 = this.labels) != null ? ref2.animate(origin === 'redraw').position({
        transform: (function(_this) {
          return function(d, i, s) {
            return 'translate(' + (_this.h(_this.x(d, i, s))) + ',' + (_this.v(_this.y(d, i, s))) + ')';
          };
        })(this)
      }) : void 0;
    };

    Path.prototype._style = function(style_new) {
      var ref, ref1;
      Path.__super__._style.apply(this, arguments);
      this.paths.style(style_new);
      if ((ref = this.circles) != null) {
        ref.style(style_new);
      }
      return (ref1 = this.labels) != null ? ref1.style(style_new) : void 0;
    };

    Path.prototype.min_x = function() {
      var ref, ref1;
      if (this.stacks == null) {
        if (this.data.length) {
          return this.x(this.data[0]);
        }
      } else {
        return (ref = this.stacks[0]) != null ? (ref1 = ref.values[0]) != null ? ref1.x : void 0 : void 0;
      }
    };

    Path.prototype.max_x = function() {
      var ref, ref1;
      if (this.stacks == null) {
        if (this.data.length) {
          return this.x(this.data.slice(-1)[0]);
        }
      } else {
        return (ref = this.stacks[0]) != null ? (ref1 = ref.values.slice(-1)[0]) != null ? ref1.x : void 0 : void 0;
      }
    };

    return Path;

  })(c3.Plot.Layer.Stackable);

  c3.Plot.Layer.Line = (function(superClass) {
    extend(Line, superClass);

    function Line() {
      return Line.__super__.constructor.apply(this, arguments);
    }

    Line.prototype.type = 'line';

    Line.prototype.path_generator_factory = d3.svg.line;

    return Line;

  })(c3.Plot.Layer.Path);

  c3.Plot.Layer.Area = (function(superClass) {
    extend(Area, superClass);

    function Area() {
      return Area.__super__.constructor.apply(this, arguments);
    }

    Area.prototype.type = 'area';

    Area.prototype.path_generator_factory = d3.svg.area;

    Area.prototype.baseline = void 0;

    return Area;

  })(c3.Plot.Layer.Path);

  c3.Plot.Layer.Bar = (function(superClass) {
    extend(Bar, superClass);

    function Bar() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      return Bar.__super__.constructor.apply(this, arguments);
    }

    Bar.version = 0.2;

    Bar.prototype.type = 'bar';

    Bar.prototype.key = void 0;

    Bar.prototype.bar_width = "50%";

    Bar.prototype.rect_options = void 0;

    Bar.prototype._update = function() {
      Bar.__super__._update.apply(this, arguments);
      return this.rects = this.groups.select('rect').options(this.rect_options).animate('origin is redraw').bind((this.stacks != null ? (function(stack) {
        return stack.current_data;
      }) : this.current_data), this.key).update();
    };

    Bar.prototype._draw = function(origin) {
      var bar_ratio, bar_shift, bar_width, base, base1, baseline, height, x, y;
      baseline = this.v(0);
      if (typeof this.bar_width === 'function') {
        bar_width = this.bar_width;
        bar_shift = function() {
          return bar_width.apply(null, arguments) / 2;
        };
      } else {
        bar_width = +this.bar_width;
        if (!isNaN(bar_width)) {
          if (typeof (base = this.h).rangeBands === "function") {
            base.rangeBands(this.h.rangeExtent(), 1, 0.5);
          }
          bar_shift = bar_width / 2;
        } else {
          if ((typeof (base1 = this.bar_width).charAt === "function" ? base1.charAt(this.bar_width.length - 1) : void 0) === '%') {
            bar_ratio = +this.bar_width.slice(0, -1) / 100;
            if (isNaN(bar_ratio)) {
              throw "Invalid bar_width percentage " + this.bar_width.slice(0, -1);
            }
            if (this.h.rangeBands != null) {
              this.h.rangeBands(this.h.rangeExtent(), 1 - bar_ratio, 1 - bar_ratio);
              bar_width = this.h.rangeBand();
              bar_shift = 0;
            } else {
              bar_width = this.stacks != null ? (function(_this) {
                return function(d, i, j) {
                  var left, mid, ref, ref1, right, values, width;
                  values = _this.stacks[j].values;
                  mid = _this.h(values[i].x);
                  left = _this.h(!i ? ((ref = _this.chart.orig_h) != null ? ref : _this.h).domain()[0] : values[i - 1].x);
                  right = _this.h(i === values.length - 1 ? ((ref1 = _this.chart.orig_h) != null ? ref1 : _this.h).domain()[1] : values[i + 1].x);
                  width = Math.min(mid - left, right - mid) * bar_ratio;
                  if (width >= 0) {
                    return width;
                  } else {
                    return 0;
                  }
                };
              })(this) : (function(_this) {
                return function(d, i) {
                  var left, mid, ref, ref1, right, width;
                  mid = _this.h(_this.x(d, i));
                  left = _this.h(!i ? ((ref = _this.chart.orig_h) != null ? ref : _this.h).domain()[0] : _this.x(_this.current_data[i - 1], i - 1));
                  right = _this.h(i === _this.current_data.length - 1 ? ((ref1 = _this.chart.orig_h) != null ? ref1 : _this.h).domain()[1] : _this.x(_this.current_data[i + 1], i + 1));
                  width = Math.min(mid - left, right - mid) * bar_ratio;
                  if (width >= 0) {
                    return width;
                  } else {
                    return 0;
                  }
                };
              })(this);
              bar_shift = function() {
                return bar_width.apply(null, arguments) / 2;
              };
            }
          } else {
            throw "Invalid bar_width " + this.bar_width;
          }
        }
      }
      if (this.stacks != null) {
        x = (function(_this) {
          return function(d, i, j) {
            return _this.h(_this.stacks[j].values[i].x);
          };
        })(this);
        y = (function(_this) {
          return function(d, i, j) {
            return _this.v(_this.stacks[j].values[i].y0 + _this.stacks[j].values[i].y);
          };
        })(this);
        height = (function(_this) {
          return function(d, i, j) {
            return baseline - (_this.v(_this.stacks[j].values[i].y));
          };
        })(this);
      } else {
        x = (function(_this) {
          return function(d, i) {
            return _this.h(_this.x(d, i));
          };
        })(this);
        y = (function(_this) {
          return function(d, i) {
            y = _this.y(d, i);
            if (y > 0) {
              return _this.v(y);
            } else {
              return baseline;
            }
          };
        })(this);
        height = (function(_this) {
          return function(d, i) {
            return Math.abs(baseline - (_this.v(_this.y(d, i))));
          };
        })(this);
      }
      return this.rects.animate(origin === 'redraw').position({
        x: !bar_shift ? x : typeof bar_shift !== 'function' ? function() {
          return x.apply(null, arguments) - bar_shift;
        } : function() {
          return x.apply(null, arguments) - bar_shift.apply(null, arguments);
        },
        y: y,
        height: height,
        width: bar_width
      });
    };

    Bar.prototype._style = function(style_new) {
      Bar.__super__._style.apply(this, arguments);
      return this.rects.style(style_new);
    };

    return Bar;

  })(c3.Plot.Layer.Stackable);

  c3.Plot.Layer.Line.Straight = (function(superClass) {
    extend(Straight, superClass);

    function Straight() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._size = bind(this._size, this);
      this._init = bind(this._init, this);
      return Straight.__super__.constructor.apply(this, arguments);
    }

    Straight.version = 0.1;

    Straight.prototype.type = 'straight';

    Straight.prototype.key = void 0;

    Straight.prototype.value = void 0;

    Straight.prototype.filter = void 0;

    Straight.prototype.draggable = false;

    Straight.prototype.vector_options = void 0;

    Straight.prototype.line_options = void 0;

    Straight.prototype.grab_line_options = void 0;

    Straight.prototype.label_options = void 0;

    Straight.prototype._init = function() {
      var drag_value, self;
      if (this.value == null) {
        this.value = function(d) {
          return d;
        };
      }
      if (this.draggable) {
        self = this;
        this.dragger = d3.behavior.drag();
        drag_value = void 0;
        this.dragger.on('dragstart', (function(_this) {
          return function(d, i) {
            d3.event.sourceEvent.stopPropagation();
            return _this.trigger('dragstart', d, i);
          };
        })(this));
        this.dragger.on('drag', function(d, i) {
          var domain, ref;
          domain = ((ref = self.chart.orig_h) != null ? ref : self.scale).domain();
          drag_value = Math.min(Math.max(self.scale.invert(d3.event.y), domain[0]), domain[1]);
          d3.select(this).attr('transform', 'translate(0,' + self.scale(drag_value) + ')');
          return self.trigger('drag', drag_value, d, i);
        });
        return this.dragger.on('dragend', (function(_this) {
          return function(d, i) {
            return _this.trigger('dragend', drag_value, d, i);
          };
        })(this));
      }
    };

    Straight.prototype._size = function() {
      var ref, ref1, ref2, ref3, ref4, ref5;
      if ((ref = this.lines) != null) {
        if ((ref1 = ref.all) != null) {
          ref1.attr('x2', this.line_length);
        }
      }
      if ((ref2 = this.grab_lines) != null) {
        if ((ref3 = ref2.all) != null) {
          ref3.attr('x2', this.line_length);
        }
      }
      return (ref4 = this.labels) != null ? (ref5 = ref4.all) != null ? ref5.attr('x', this.label_options.alignment === 'right' || this.label_options.alignment === 'top' ? this.width : 0) : void 0 : void 0;
    };

    Straight.prototype._update = function(origin) {
      var base, base1, d, i;
      this.current_data = this.filter != null ? (function() {
        var l, len, ref, results;
        ref = this.data;
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          d = ref[i];
          if (this.filter(d, i)) {
            results.push(d);
          }
        }
        return results;
      }).call(this) : this.data;
      this.vectors = this.content.select('g.vector').options(this.vector_options).animate(origin === 'redraw').bind(this.current_data, this.key).update();
      this.lines = this.vectors.inherit('line').options(this.line_options).update();
      if (this.label_options != null) {
        if ((base = this.label_options).dx == null) {
          base.dx = '0.25em';
        }
        if ((base1 = this.label_options).dy == null) {
          base1.dy = '-0.25em';
        }
        this.labels = this.vectors.inherit('text').options(this.label_options).update();
      }
      if (this.draggable || this.grab_line_options) {
        this.grab_lines = this.vectors.inherit('line.grab');
        if (this.grab_line_options) {
          this.grab_lines.options(this.grab_line_options).update();
        }
      }
      if (this.draggable) {
        return this.vectors["new"].call(this.dragger);
      }
    };

    Straight.prototype._draw = function(origin) {
      var far_labels, ref;
      this.vectors.animate(origin === 'redraw').position({
        transform: (function(_this) {
          return function(d, i) {
            return 'translate(0,' + (_this.scale(_this.value(d, i))) + ')';
          };
        })(this)
      });
      this.lines["new"].attr('x2', this.line_length);
      if ((ref = this.grab_lines) != null) {
        ref["new"].attr('x2', this.line_length);
      }
      if (this.labels != null) {
        far_labels = this.label_options.alignment === 'right' || this.label_options.alignment === 'top';
        this.g.style('text-anchor', far_labels ? 'end' : 'start');
        return this.labels.position({
          dx: far_labels ? '-' + this.label_options.dx : this.label_options.dx,
          dy: this.label_options.dy,
          x: far_labels ? this.line_length : 0
        });
      }
    };

    Straight.prototype._style = function(style_new) {
      var ref, ref1;
      this.g.classed('draggable', this.draggable);
      this.vectors.style(style_new);
      this.lines.style(style_new);
      if ((ref = this.grab_lines) != null) {
        if (typeof ref.style === "function") {
          ref.style(style_new);
        }
      }
      return (ref1 = this.labels) != null ? typeof ref1.style === "function" ? ref1.style(style_new) : void 0 : void 0;
    };

    return Straight;

  })(c3.Plot.Layer);

  c3.Plot.Layer.Line.Horizontal = (function(superClass) {
    extend(Horizontal, superClass);

    function Horizontal() {
      this._size = bind(this._size, this);
      this._init = bind(this._init, this);
      return Horizontal.__super__.constructor.apply(this, arguments);
    }

    Horizontal.prototype.type = 'horizontal';

    Horizontal.prototype._init = function() {
      if (typeof label_options !== "undefined" && label_options !== null) {
        if (label_options.alignment == null) {
          label_options.alignment = 'left';
        }
      }
      Horizontal.__super__._init.apply(this, arguments);
      return this.scale = this.v;
    };

    Horizontal.prototype._size = function() {
      this.line_length = this.width;
      return Horizontal.__super__._size.apply(this, arguments);
    };

    return Horizontal;

  })(c3.Plot.Layer.Line.Straight);

  c3.Plot.Layer.Line.Vertical = (function(superClass) {
    extend(Vertical, superClass);

    function Vertical() {
      this._size = bind(this._size, this);
      this._init = bind(this._init, this);
      return Vertical.__super__.constructor.apply(this, arguments);
    }

    Vertical.prototype.type = 'vertical';

    Vertical.prototype._init = function() {
      if (typeof label_options !== "undefined" && label_options !== null) {
        if (label_options.alignment == null) {
          label_options.alignment = 'top';
        }
      }
      Vertical.__super__._init.apply(this, arguments);
      return this.scale = this.h;
    };

    Vertical.prototype._size = function() {
      this.g.attr({
        transform: 'rotate(-90) translate(' + -this.height + ',0)'
      });
      this.line_length = this.height;
      return Vertical.__super__._size.apply(this, arguments);
    };

    return Vertical;

  })(c3.Plot.Layer.Line.Straight);

  c3.Plot.Layer.Region = (function(superClass) {
    extend(Region, superClass);

    function Region() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._size = bind(this._size, this);
      this._init = bind(this._init, this);
      return Region.__super__.constructor.apply(this, arguments);
    }

    Region.prototype.type = 'region';

    Region.prototype._init = function() {
      var drag_value, dragger, l, len, origin, ref, results, self;
      if (((this.x != null) && (this.x2 == null)) || ((this.x == null) && (this.x2 != null)) || ((this.y != null) && (this.y2 == null)) || ((this.y == null) && (this.y2 != null))) {
        throw Error("x and x2 options or y and y2 options must either be both defined or undefined");
      }
      if (this.draggable || this.resizable) {
        drag_value = void 0;
        origin = void 0;
        self = this;
        this.dragger = d3.behavior.drag().origin((function(_this) {
          return function(d, i) {
            return {
              x: _this.x != null ? _this.h(_this.x(d, i)) : 0,
              y: _this.y != null ? _this.v(_this.y(d, i)) : 0
            };
          };
        })(this)).on('drag', function(d, i) {
          var h_domain, height, ref, v_domain, width, x, y;
          h_domain = ((ref = self.orig_h) != null ? ref : self.h).domain();
          v_domain = self.v.domain();
          if (self.x != null) {
            width = self.x2(d) - self.x(d);
            x = Math.min(Math.max(self.h.invert(d3.event.x), h_domain[0]), h_domain[1] - width);
          }
          if (self.y != null) {
            height = self.y2(d) - self.y(d);
            y = Math.min(Math.max(self.v.invert(d3.event.y), v_domain[0]), v_domain[1] - height);
          }
          drag_value = {
            x: x != null ? self.h.invert(self.h(x)) : void 0,
            x2: x != null ? self.h.invert(self.h(x + width)) : void 0,
            y: y != null ? self.v.invert(self.v(y)) : void 0,
            y2: y != null ? self.v.invert(self.v(y + height)) : void 0
          };
          if (self.x != null) {
            d3.select(this).attr('x', self.h(drag_value.x));
          }
          if (self.y != null) {
            d3.select(this).attr('y', self.v(drag_value.y2));
          }
          return self.trigger('drag', drag_value, d, i);
        });
        this.left_resizer = d3.behavior.drag().origin((function(_this) {
          return function(d, i) {
            return {
              x: _this.h(_this.x(d, i))
            };
          };
        })(this)).on('drag', function(d, i) {
          var h_domain, ref, x, x2;
          h_domain = ((ref = self.orig_h) != null ? ref : self.h).domain();
          x = Math.min(Math.max(self.h.invert(d3.event.x), h_domain[0]), h_domain[1]);
          x2 = self.x2(d);
          drag_value = {
            x: self.h.invert(self.h(Math.min(x, x2))),
            x2: self.h.invert(self.h(Math.max(x, x2))),
            y: self.y != null ? self.y(d) : void 0,
            y2: self.y2 != null ? self.y2(d) : void 0
          };
          d3.select(this.parentNode).select('rect').attr({
            x: self.h(drag_value.x),
            width: self.h(drag_value.x2) - self.h(drag_value.x)
          });
          return self.trigger('drag', drag_value, d, i);
        });
        this.right_resizer = d3.behavior.drag().origin((function(_this) {
          return function(d, i) {
            return {
              x: _this.h(_this.x2(d, i))
            };
          };
        })(this)).on('drag', function(d, i) {
          var h_domain, ref, x, x2;
          h_domain = ((ref = self.orig_h) != null ? ref : self.h).domain();
          x = Math.min(Math.max(self.h.invert(d3.event.x), h_domain[0]), h_domain[1]);
          x2 = self.x(d);
          drag_value = {
            x: self.h.invert(self.h(Math.min(x, x2))),
            x2: self.h.invert(self.h(Math.max(x, x2))),
            y: self.y != null ? self.y(d) : void 0,
            y2: self.y2 != null ? self.y2(d) : void 0
          };
          d3.select(this.parentNode).select('rect').attr({
            x: self.h(drag_value.x),
            width: self.h(drag_value.x2) - self.h(drag_value.x)
          });
          return self.trigger('drag', drag_value, d, i);
        });
        this.top_resizer = d3.behavior.drag().origin((function(_this) {
          return function(d, i) {
            return {
              y: _this.v(_this.y2(d, i))
            };
          };
        })(this)).on('drag', function(d, i) {
          var v_domain, y, y2;
          v_domain = self.v.domain();
          y = Math.min(Math.max(self.v.invert(d3.event.y), v_domain[0]), v_domain[1]);
          y2 = self.y(d);
          drag_value = {
            x: self.x != null ? self.x(d) : void 0,
            x2: self.x2 != null ? self.x2(d) : void 0,
            y: self.v.invert(self.v(Math.min(y, y2))),
            y2: self.v.invert(self.v(Math.max(y, y2)))
          };
          d3.select(this.parentNode).select('rect').attr({
            y: self.v(drag_value.y2),
            height: self.v(drag_value.y) - self.v(drag_value.y2)
          });
          return self.trigger('drag', drag_value, d, i);
        });
        this.bottom_resizer = d3.behavior.drag().origin((function(_this) {
          return function(d, i) {
            return {
              y: _this.v(_this.y(d, i))
            };
          };
        })(this)).on('drag', function(d, i) {
          var v_domain, y, y2;
          v_domain = self.v.domain();
          y = Math.min(Math.max(self.v.invert(d3.event.y), v_domain[0]), v_domain[1]);
          y2 = self.y2(d);
          drag_value = {
            x: self.x != null ? self.x(d) : void 0,
            x2: self.x2 != null ? self.x2(d) : void 0,
            y: self.v.invert(self.v(Math.min(y, y2))),
            y2: self.v.invert(self.v(Math.max(y, y2)))
          };
          d3.select(this.parentNode).select('rect').attr({
            y: self.v(drag_value.y2),
            height: self.v(drag_value.y) - self.v(drag_value.y2)
          });
          return self.trigger('drag', drag_value, d, i);
        });
        ref = [this.dragger, this.left_resizer, this.right_resizer, this.top_resizer, this.bottom_resizer];
        results = [];
        for (l = 0, len = ref.length; l < len; l++) {
          dragger = ref[l];
          results.push(dragger.on('dragstart', (function(_this) {
            return function(d, i) {
              d3.event.sourceEvent.stopPropagation();
              return _this.trigger('dragstart', d, i);
            };
          })(this)).on('dragend', (function(_this) {
            return function(d, i) {
              _this.trigger('dragend', drag_value, d, i);
              return _this._draw();
            };
          })(this)));
        }
        return results;
      }
    };

    Region.prototype._size = function() {
      var ref, ref1, ref2, ref3, ref4, ref5;
      if (this.x == null) {
        if ((ref = this.rects) != null) {
          ref.all.attr('width', this.width);
        }
        if ((ref1 = this.left_grab_lines) != null) {
          ref1.all.attr('width', this.width);
        }
        if ((ref2 = this.right_grab_lines) != null) {
          ref2.all.attr('width', this.width);
        }
      }
      if (this.y == null) {
        if ((ref3 = this.rects) != null) {
          ref3.all.attr('height', this.height);
        }
        if ((ref4 = this.top_grab_lines) != null) {
          ref4.all.attr('height', this.height);
        }
        return (ref5 = this.bottom_grab_lines) != null ? ref5.all.attr('height', this.height) : void 0;
      }
    };

    Region.prototype._update = function(origin) {
      var d, i;
      this.current_data = this.filter != null ? (function() {
        var l, len, ref, results;
        ref = this.data;
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          d = ref[i];
          if (this.filter(d, i)) {
            results.push(d);
          }
        }
        return results;
      }).call(this) : this.data;
      this.regions = this.content.select('g.region').options(this.region_options).animate(origin === 'redraw').bind(this.current_data, this.key).update();
      this.rects = this.regions.inherit('rect').options(this.rect_options).update();
      if (this.draggable) {
        this.rects["new"].call(this.dragger);
      }
      if (this.resizable) {
        if (this.x != null) {
          this.left_grab_lines = this.regions.inherit('line.grab.left');
          this.left_grab_lines["new"].call(this.left_resizer);
        }
        if (this.x2 != null) {
          this.right_grab_lines = this.regions.inherit('line.grab.right');
          this.right_grab_lines["new"].call(this.right_resizer);
        }
        if (this.y != null) {
          this.top_grab_lines = this.regions.inherit('line.grab.top');
          this.top_grab_lines["new"].call(this.top_resizer);
        }
        if (this.y2 != null) {
          this.bottom_grab_lines = this.regions.inherit('line.grab.bottom');
          return this.bottom_grab_lines["new"].call(this.bottom_resizer);
        }
      }
    };

    Region.prototype._draw = function(origin) {
      var ref, ref1, ref2, ref3;
      this.rects.animate(origin === 'redraw').position({
        x: (function(_this) {
          return function(d) {
            if (_this.x != null) {
              return _this.h(_this.x(d));
            } else {
              return 0;
            }
          };
        })(this),
        width: (function(_this) {
          return function(d) {
            if (_this.x2 != null) {
              return _this.h(_this.x2(d)) - _this.h(_this.x(d));
            } else {
              return _this.width;
            }
          };
        })(this),
        y: (function(_this) {
          return function(d) {
            if (_this.y2 != null) {
              return _this.v(_this.y2(d));
            } else {
              return 0;
            }
          };
        })(this),
        height: (function(_this) {
          return function(d) {
            if (_this.y != null) {
              return _this.v(_this.y(d)) - _this.v(_this.y2(d));
            } else {
              return _this.height;
            }
          };
        })(this)
      });
      if (this.resizable) {
        if ((ref = this.left_grab_lines) != null) {
          ref.animate(origin === 'redraw').position({
            x1: (function(_this) {
              return function(d) {
                return _this.h(_this.x(d));
              };
            })(this),
            x2: (function(_this) {
              return function(d) {
                return _this.h(_this.x(d));
              };
            })(this),
            y1: (function(_this) {
              return function(d) {
                if (_this.y != null) {
                  return _this.v(_this.y(d));
                } else {
                  return 0;
                }
              };
            })(this),
            y2: (function(_this) {
              return function(d) {
                if (_this.y2 != null) {
                  return _this.v(_this.y2(d));
                } else {
                  return _this.height;
                }
              };
            })(this)
          });
        }
        if ((ref1 = this.right_grab_lines) != null) {
          ref1.animate(origin === 'redraw').position({
            x1: (function(_this) {
              return function(d) {
                return _this.h(_this.x2(d));
              };
            })(this),
            x2: (function(_this) {
              return function(d) {
                return _this.h(_this.x2(d));
              };
            })(this),
            y1: (function(_this) {
              return function(d) {
                if (_this.y != null) {
                  return _this.v(_this.y(d));
                } else {
                  return 0;
                }
              };
            })(this),
            y2: (function(_this) {
              return function(d) {
                if (_this.y2 != null) {
                  return _this.v(_this.y2(d));
                } else {
                  return _this.height;
                }
              };
            })(this)
          });
        }
        if ((ref2 = this.top_grab_lines) != null) {
          ref2.animate(origin === 'redraw').position({
            x1: (function(_this) {
              return function(d) {
                if (_this.x != null) {
                  return _this.h(_this.x(d));
                } else {
                  return 0;
                }
              };
            })(this),
            x2: (function(_this) {
              return function(d) {
                if (_this.x2 != null) {
                  return _this.h(_this.x2(d));
                } else {
                  return _this.width;
                }
              };
            })(this),
            y1: (function(_this) {
              return function(d) {
                return _this.v(_this.y2(d));
              };
            })(this),
            y2: (function(_this) {
              return function(d) {
                return _this.v(_this.y2(d));
              };
            })(this)
          });
        }
        return (ref3 = this.bottom_grab_lines) != null ? ref3.animate(origin === 'redraw').position({
          x1: (function(_this) {
            return function(d) {
              if (_this.x != null) {
                return _this.h(_this.x(d));
              } else {
                return 0;
              }
            };
          })(this),
          x2: (function(_this) {
            return function(d) {
              if (_this.x2 != null) {
                return _this.h(_this.x2(d));
              } else {
                return _this.width;
              }
            };
          })(this),
          y1: (function(_this) {
            return function(d) {
              return _this.v(_this.y(d));
            };
          })(this),
          y2: (function(_this) {
            return function(d) {
              return _this.v(_this.y(d));
            };
          })(this)
        }) : void 0;
      }
    };

    Region.prototype._style = function(style_new) {
      this.g.classed({
        'draggable': this.draggable,
        'horizontal': this.x == null,
        'vertical': this.y == null
      });
      this.regions.style(style_new);
      return this.rects.style(style_new);
    };

    return Region;

  })(c3.Plot.Layer);

  c3.Plot.Layer.Scatter = (function(superClass) {
    extend(Scatter, superClass);

    function Scatter() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._init = bind(this._init, this);
      return Scatter.__super__.constructor.apply(this, arguments);
    }

    Scatter.version = 0.1;

    Scatter.prototype.type = 'scatter';

    Scatter.prototype.key = void 0;

    Scatter.prototype.value = void 0;

    Scatter.prototype.r = 1;

    Scatter.prototype.a = void 0;

    Scatter.prototype.safe = true;

    Scatter.prototype.filter = void 0;

    Scatter.prototype.limit_elements = void 0;

    Scatter.prototype.point_options = void 0;

    Scatter.prototype.circle_options = void 0;

    Scatter.prototype.label_options = void 0;

    Scatter.prototype._init = function() {
      if (this.x == null) {
        throw Error("x must be defined for a scatter plot layer");
      }
      if (this.y == null) {
        throw Error("y must be defined for a scatter plot layer");
      }
      if (this.h == null) {
        throw Error("h must be defined for a scatter plot layer");
      }
      if (this.v == null) {
        throw Error("v must be defined for a scatter plot layer");
      }
    };

    Scatter.prototype._update = function(origin) {
      var d, i;
      if (!this.data) {
        throw Error("Data must be defined for scatter layer.");
      }
      this.current_data = (this.filter != null) && (this.key != null) ? (function() {
        var l, len, ref, results;
        ref = this.data;
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          d = ref[i];
          if (this.filter(d, i)) {
            results.push(d);
          }
        }
        return results;
      }).call(this) : this.data;
      if (this.safe) {
        this.current_data = (function() {
          var l, len, ref, results;
          ref = this.current_data;
          results = [];
          for (l = 0, len = ref.length; l < len; l++) {
            d = ref[l];
            if ((this.x(d) != null) && (this.y(d) != null) && ((this.a == null) || typeof this.a !== 'function' || (this.a(d) != null)) && (typeof this.r !== 'function' || (this.r(d) != null))) {
              results.push(d);
            }
          }
          return results;
        }).call(this);
      }
      if (this.limit_elements != null) {
        if (this.value != null) {
          this.current_data = this.current_data.slice(0);
          c3.array.sort_up(this.current_data, (function(_this) {
            return function(d) {
              return -_this.value(d);
            };
          })(this));
          this.current_data = this.current_data.slice(0, +this.limit_elements + 1 || 9e9);
        } else {
          this.current_data = this.current_data.slice(0, +this.limit_elements + 1 || 9e9);
        }
      }
      this.points = this.content.select('g.point').options(this.point_options).animate(origin === 'redraw').bind(this.current_data, this.key).update();
      if ((this.filter != null) && (this.key == null)) {
        this.points.all.attr('display', (function(_this) {
          return function(d, i) {
            if (!_this.filter(d, i)) {
              return 'none';
            }
          };
        })(this));
      }
      this.circles = this.points.inherit('circle').options(this.circle_options).animate(origin === 'redraw').update();
      if (this.label_options != null) {
        return this.labels = this.points.inherit('text').options(this.label_options).update();
      }
    };

    Scatter.prototype._draw = function(origin) {
      this.points.animate(origin === 'redraw').position({
        transform: (function(_this) {
          return function(d, i) {
            return 'translate(' + (_this.h(_this.x(d, i))) + ',' + (_this.v(_this.y(d, i))) + ')';
          };
        })(this)
      });
      return this.circles.animate(origin === 'redraw').position({
        r: this.a == null ? this.r : typeof this.a === 'function' ? (function(_this) {
          return function(d, i) {
            return Math.sqrt(_this.a(d, i) / Math.PI);
          };
        })(this) : Math.sqrt(this.a / Math.PI)
      });
    };

    Scatter.prototype._style = function(style_new) {
      var ref;
      this.points.style(style_new);
      this.circles.style(style_new);
      return (ref = this.labels) != null ? ref.style(style_new) : void 0;
    };

    return Scatter;

  })(c3.Plot.Layer);

  c3.Plot.Layer.Swimlane = (function(superClass) {
    extend(Swimlane, superClass);

    function Swimlane() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._size = bind(this._size, this);
      this._init = bind(this._init, this);
      return Swimlane.__super__.constructor.apply(this, arguments);
    }

    Swimlane.prototype.type = 'swimlane';

    Swimlane.prototype.v_orient = 'top';

    Swimlane.prototype.dy = void 0;

    Swimlane.prototype.hover = void 0;

    Swimlane.prototype.lane_options = void 0;

    Swimlane.prototype._init = function() {
      var anchor, layer, mousemove;
      if (this.lane_options != null) {
        this.lanes = this.content.select('rect.lane', ':first-child').options(this.lane_options);
      }
      if (this.hover != null) {
        anchor = d3.select(this.chart.anchor);
        this.tip = c3.select(anchor, 'div.c3.hover').singleton();
        layer = this;
        mousemove = function() {
          var elt, hover_datum, hover_html, layerX, layerY, ref, swimlane, x, y;
          ref = d3.mouse(this), layerX = ref[0], layerY = ref[1];
          swimlane = Math.floor(layer.v.invert(layerY));
          swimlane = Math.min(swimlane, Math.max(layer.v.domain()[0], layer.v.domain()[1] - 1));
          x = layer.h.invert(layerX);
          hover_datum = layer._hover_datum(x, swimlane);
          hover_html = (c3.functor(layer.hover))(hover_datum, (hover_datum ? layer.data.indexOf(hover_datum) : null), swimlane);
          if (!hover_html) {
            return layer.tip.all.style('display', 'none');
          } else {
            layer.tip.all.html(hover_html);
            elt = layer.tip.all.node();
            x = d3.event.clientX;
            y = d3.event.clientY;
            if (x + elt.clientWidth > document.body.clientWidth) {
              x = document.body.clientWidth - elt.clientWidth;
            }
            return layer.tip.all.style({
              display: 'block',
              left: x + 'px',
              top: y + 'px'
            });
          }
        };
        this.chart.v_orient = this.v_orient;
        this.chart.content.all.on('mouseleave.hover', (function(_this) {
          return function() {
            return layer.tip.all.style('display', 'none');
          };
        })(this));
        this.chart.content.all.on('mousedown.hover', (function(_this) {
          return function() {
            layer.tip.all.style('display', 'none');
            return _this.chart.content.all.on('mousemove.hover', null);
          };
        })(this));
        this.chart.content.all.on('mouseup.hover', (function(_this) {
          return function() {
            return _this.chart.content.all.on('mousemove.hover', mousemove);
          };
        })(this));
        this.chart.content.all.on('mouseenter.hover', (function(_this) {
          return function() {
            if (!d3.event.buttons) {
              return _this.chart.content.all.on('mousemove.hover', mousemove);
            }
          };
        })(this));
        return this.chart.content.all.on('mousemove.hover', mousemove);
      }
    };

    Swimlane.prototype._size = function() {
      if (this.y == null) {
        this.dy = this.height;
      } else {
        if (this.dy == null) {
          this.dy = Math.round(this.height / (Math.abs(this.v.domain()[1] - this.v.domain()[0])));
        }
      }
      return this.g.attr('transform', this.v_orient === 'bottom' ? 'translate(0,-' + this.dy + ')' : '');
    };

    Swimlane.prototype._update = function() {
      var l, ref, ref1, ref2, results;
      this.x = c3.functor(this.x);
      this.dx = c3.functor(this.dx);
      if ((ref = this.lanes) != null) {
        ref.bind((function() {
          results = [];
          for (var l = ref1 = this.v.domain()[0], ref2 = this.v.domain()[1]; ref1 <= ref2 ? l < ref2 : l > ref2; ref1 <= ref2 ? l++ : l--){ results.push(l); }
          return results;
        }).apply(this)).update();
      }
      if (this.y != null) {
        return this.chart.size(null, this.dy * (Math.abs(this.v.domain()[1] - this.v.domain()[0])) + this.chart.margins.top + this.chart.margins.bottom);
      }
    };

    Swimlane.prototype._draw = function(origin) {
      var ref;
      if (origin === 'resize' || origin === 'render') {
        return (ref = this.lanes) != null ? ref.position({
          y: (function(_this) {
            return function(lane) {
              return _this.v(lane);
            };
          })(this),
          width: this.chart.orig_h.range()[1],
          height: this.dy
        }) : void 0;
      }
    };

    Swimlane.prototype._style = function() {
      var ref;
      return (ref = this.lanes) != null ? ref.style() : void 0;
    };

    return Swimlane;

  })(c3.Plot.Layer);

  c3.Plot.Layer.Swimlane.Segment = (function(superClass) {
    var scaled;

    extend(Segment, superClass);

    function Segment() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._hover_datum = bind(this._hover_datum, this);
      this._init = bind(this._init, this);
      return Segment.__super__.constructor.apply(this, arguments);
    }

    Segment.version = 0.1;

    Segment.prototype.type = 'segment';

    Segment.prototype.dx = null;

    Segment.prototype.key = void 0;

    Segment.prototype.filter = void 0;

    Segment.prototype.value = void 0;

    Segment.prototype.limit_elements = void 0;

    Segment.prototype.rect_options = void 0;

    Segment.prototype.label_options = void 0;

    scaled = false;

    Segment.prototype._init = function() {
      var ref;
      Segment.__super__._init.apply(this, arguments);
      this.g.classed('segment', true);
      if (scaled) {
        this.scaled_g = this.g.append('g').attr('class', 'scaled');
      }
      this.rects_group = c3.select((ref = this.scaled_g) != null ? ref : this.g, 'g.segments').singleton();
      if (this.label_options != null) {
        return this.labels_clip = c3.select(this.g, 'g.labels').singleton().select('svg');
      }
    };

    Segment.prototype._hover_datum = function(x, swimlane) {
      var _x, datum, idx, l, len, ref, right;
      right = this.h.invert(this.h(x) + 1);
      ref = this.current_data;
      for (idx = l = 0, len = ref.length; l < len; idx = ++l) {
        datum = ref[idx];
        if (((this.y == null) || this.y(datum) === swimlane) && (_x = this.x(datum)) <= right && x <= _x + this.dx(datum)) {
          break;
        }
      }
      if (idx === this.current_data.length) {
        return null;
      } else {
        return datum;
      }
    };

    Segment.prototype._update = function() {
      var d, i, ref;
      Segment.__super__._update.apply(this, arguments);
      this.current_data = this.filter == null ? this.data : (function() {
        var l, len, ref, results;
        ref = this.data;
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          d = ref[i];
          if (this.filter(d, i)) {
            results.push(d);
          }
        }
        return results;
      }).call(this);
      if (this.limit_elements != null) {
        if (this.filter == null) {
          this.current_data = this.current_data.slice(0);
        }
        return c3.array.sort_down(this.current_data, (ref = this.value) != null ? ref : this.dx);
      }
    };

    Segment.prototype._draw = function(origin) {
      var current_labels, data, datum, dx, h, half_pixel_width, l, left_edge, len, ref, ref1, ref2, right_edge, self, translate, x, zero_pos;
      Segment.__super__._draw.apply(this, arguments);
      ref = this.h.domain(), left_edge = ref[0], right_edge = ref[1];
      half_pixel_width = (right_edge - left_edge) / ((this.h.range()[1] - this.h.range()[0]) || 1) / 2;
      data = [];
      ref1 = this.current_data;
      for (l = 0, len = ref1.length; l < len; l++) {
        datum = ref1[l];
        if (!((x = this.x(datum)) < right_edge && (x + (dx = this.dx(datum))) > left_edge)) {
          continue;
        }
        if (dx < half_pixel_width) {
          if (this.limit_elements != null) {
            break;
          } else {
            continue;
          }
        }
        data.push(datum);
        if (data.length === this.limit_elements) {
          break;
        }
      }
      this.rects = this.rects_group.select('rect.segment').options(this.rect_options).bind(data, this.key).update();
      if (origin === 'pan') {
        translate = (this.chart.v.domain()[0] - this.chart.orig_v.domain()[0]) * this.max_depth;
        this.v.domain([translate, translate + this.max_depth]);
      }
      h = this.scaled_g != null ? (ref2 = this.chart.orig_h) != null ? ref2 : this.h : this.h;
      zero_pos = h(0);
      (origin === 'resize' ? this.rects.all : this.rects["new"]).attr('height', this.dy);
      (!scaled || (this.key == null) || origin === 'resize' || origin === 'pan' || (origin === 'redraw' && this instanceof c3.Plot.Layer.Swimlane.Flamechart) ? this.rects.all : this.rects["new"]).attr({
        x: (function(_this) {
          return function(d) {
            return h(_this.x(d));
          };
        })(this),
        width: (function(_this) {
          return function(d) {
            return (h(_this.dx(d))) - zero_pos;
          };
        })(this),
        y: this.y == null ? 0 : (function(_this) {
          return function(d) {
            return _this.v(_this.y(d));
          };
        })(this)
      });
      if (this.label_options != null) {
        zero_pos = this.h(0);
        current_labels = (function() {
          var len1, m, results;
          results = [];
          for (m = 0, len1 = data.length; m < len1; m++) {
            datum = data[m];
            if ((this.h(this.dx(datum))) - zero_pos > 50) {
              results.push(datum);
            }
          }
          return results;
        }).call(this);
        this.labels_clip.bind(current_labels, this.key);
        this.labels = this.labels_clip.inherit('text').options(this.label_options).update();
        (origin === 'resize' ? this.labels_clip.all : this.labels_clip["new"]).attr('height', this.dy);
        this.labels_clip.position({
          x: (function(_this) {
            return function(d) {
              return _this.h(_this.x(d));
            };
          })(this),
          y: this.y == null ? 0 : (function(_this) {
            return function(d, i) {
              return _this.v(_this.y(d, i));
            };
          })(this),
          width: (function(_this) {
            return function(d) {
              return (_this.h(_this.dx(d))) - zero_pos;
            };
          })(this)
        });
        self = this;
        (origin === 'resize' ? this.labels.all : this.labels["new"]).attr('y', self.dy / 2);
        this.labels.position({
          x: function(d) {
            var left, right;
            x = self.x(d);
            dx = self.dx(d);
            left = Math.max(x, self.h.domain()[0]);
            right = Math.min(x + dx, self.h.domain()[1]);
            return self.h((right - left) / 2 + (left - x)) - zero_pos;
          }
        });
      } else {
        c3.select(this.g, 'g.labels').all.remove();
        delete this.labels;
      }
      if (origin === 'resize' && (!this.rects["new"].empty() || ((this.labels != null) && !this.labels["new"].empty()))) {
        return this._style(true);
      }
    };

    Segment.prototype._style = function(style_new) {
      var ref;
      Segment.__super__._style.apply(this, arguments);
      this.rects.style(style_new);
      return (ref = this.labels) != null ? ref.style(style_new) : void 0;
    };

    return Segment;

  })(c3.Plot.Layer.Swimlane);

  c3.Plot.Layer.Swimlane.Flamechart = (function(superClass) {
    extend(Flamechart, superClass);

    function Flamechart() {
      this._update = bind(this._update, this);
      this._init = bind(this._init, this);
      return Flamechart.__super__.constructor.apply(this, arguments);
    }

    Flamechart.version = 0.1;

    Flamechart.prototype.type = 'flamechart';

    Flamechart.prototype.v_orient = 'bottom';

    Flamechart.prototype._init = function() {
      Flamechart.__super__._init.apply(this, arguments);
      if (this.key == null) {
        throw Error("`key()` accessor function is required for Flamechart layers");
      }
      if (this.dy == null) {
        throw Error("`dy` option is required for Flamechart layers");
      }
      if (this.y != null) {
        throw Error("`y` option cannot be defined for Flamechart layers");
      }
      this.y = (function(_this) {
        return function(d) {
          return _this.depths[_this.key(d)];
        };
      })(this);
      return this.depths = {};
    };

    Flamechart.prototype._update = function(origin) {
      var _frame, data, datum, frame, l, len, max_depth, stack;
      Flamechart.__super__._update.apply(this, arguments);
      data = this.current_data.slice(0);
      c3.array.sort_up(data, this.x);
      max_depth = 0;
      stack = [];
      for (l = 0, len = data.length; l < len; l++) {
        datum = data[l];
        frame = {
          x: this.x(datum),
          dx: this.dx(datum)
        };
        while (stack.length && frame.x >= (_frame = stack[stack.length - 1]).x + _frame.dx) {
          stack.length--;
        }
        stack.push(frame);
        max_depth = Math.max(max_depth, stack.length);
        this.depths[this.key(datum)] = stack.length - 1;
      }
      this.v.domain([0, max_depth]);
      this.max_depth = max_depth;
      return c3.Plot.Layer.Swimlane.prototype._update.call(this, origin);
    };

    return Flamechart;

  })(c3.Plot.Layer.Swimlane.Segment);

  c3.Plot.Layer.Swimlane.Icicle = (function(superClass) {
    extend(Icicle, superClass);

    function Icicle() {
      this.rebase_key = bind(this.rebase_key, this);
      this.rebase = bind(this.rebase, this);
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this._update = bind(this._update, this);
      this._hover_datum = bind(this._hover_datum, this);
      this._init = bind(this._init, this);
      return Icicle.__super__.constructor.apply(this, arguments);
    }

    Icicle.version = 0.1;

    Icicle.prototype.type = 'icicle';

    Icicle.prototype.key = void 0;

    Icicle.prototype.value = void 0;

    Icicle.prototype.self_value = void 0;

    Icicle.prototype.parent_key = void 0;

    Icicle.prototype.children_keys = void 0;

    Icicle.prototype.children = void 0;

    Icicle.prototype.sort = false;

    Icicle.prototype.limit_elements = void 0;

    Icicle.prototype.limit_min_percent = 0.001;

    Icicle.prototype.root_datum = null;

    Icicle.prototype.set_root_on_click = true;

    Icicle.prototype.rect_options = void 0;

    Icicle.prototype.label_options = void 0;

    Icicle.prototype._init = function() {
      var base, base1, base2, base3;
      Icicle.__super__._init.apply(this, arguments);
      if (this.key == null) {
        throw Error("`key()` accessor function is required for Icicle layers");
      }
      if (this.dy == null) {
        throw Error("`dy` option is required for Icicle layers");
      }
      if (this.x != null) {
        throw Error("`x` option cannot be defined for Icicle layers");
      }
      if (this.y != null) {
        throw Error("`y` option cannot be defined for Icicle layers");
      }
      this.y = (function(_this) {
        return function(datum) {
          return _this.nodes[_this.key(datum)].y1;
        };
      })(this);
      this.segments_g = c3.select(this.g, 'g.segments').singleton();
      this.segment_options = {
        events: {
          click: (function(_this) {
            return function(d) {
              var ref;
              if (_this.set_root_on_click) {
                return _this.rebase(d !== _this.root_datum ? d : (ref = (_this.parent_key != null ? _this.nodes[_this.parent_key(d)] : _this.nodes[_this.key(d)].parent)) != null ? ref.datum : void 0);
              }
            };
          })(this)
        }
      };
      this.label_clip_options = {};
      if (this.label_options != null) {
        if ((base = this.label_options).animate == null) {
          base.animate = this.rect_options.animate;
        }
        if ((base1 = this.label_options).duration == null) {
          base1.duration = this.rect_options.duration;
        }
        if ((base2 = this.label_clip_options).animate == null) {
          base2.animate = this.rect_options.animate;
        }
        return (base3 = this.label_clip_options).duration != null ? base3.duration : base3.duration = this.rect_options.duration;
      }
    };

    Icicle.prototype._hover_datum = function(x, swimlane) {
      var key, node, ref, right;
      right = this.h.invert(this.h(x) + 1);
      ref = this.nodes;
      for (key in ref) {
        node = ref[key];
        if (node.y1 === swimlane && node.x1 <= right && x <= node.x2) {
          return node.datum;
        }
      }
      return null;
    };

    Icicle.prototype._update = function(origin) {
      var ref, ref1, ref2, ref3, ref4, ref5;
      Icicle.__super__._update.apply(this, arguments);
      if (origin !== 'revalue' && origin !== 'rebase') {
        this.tree = new c3.Layout.Tree({
          key: this.key,
          parent_key: this.parent_key,
          children_keys: this.children_keys,
          children: this.children,
          value: this.value,
          self_value: this.self_value
        });
        this.nodes = this.tree.construct(this.data);
        this.v.domain([
          0, d3.max(Object.keys(this.nodes), (function(_this) {
            return function(key) {
              return _this.nodes[key].y2;
            };
          })(this))
        ]);
        c3.Plot.Layer.Swimlane.prototype._update.call(this, origin);
      }
      if (origin !== 'rebase') {
        this.value = this.tree.revalue();
      }
      this.current_data = this.tree.layout(origin !== 'revalue' && origin !== 'rebase' ? this.sort : false, this.limit_min_percent, this.root_datum);
      if (this.current_data.length > this.limit_elements) {
        c3.array.sort_up(this.current_data, this.value);
        this.current_data = this.current_data.slice(-this.limit_elements);
      }
      this.segment_options.animate = (ref = this.rect_options) != null ? ref.animate : void 0;
      this.segment_options.animate_old = (ref1 = this.rect_options) != null ? ref1.animate : void 0;
      this.segment_options.duration = (ref2 = this.rect_options) != null ? ref2.duration : void 0;
      this.segments = this.segments_g.select('g.segment').options(this.segment_options).animate(origin === 'redraw' || origin === 'revalue' || origin === 'rebase').bind(this.current_data, this.key).update();
      if ((ref3 = this.rect_options) != null) {
        if (ref3.animate_old == null) {
          ref3.animate_old = (ref4 = this.rect_options) != null ? ref4.animate : void 0;
        }
      }
      this.rects = this.segments.inherit('rect').options(this.rect_options).update();
      if (this.label_options != null) {
        this.label_clip_options.animate_old = (ref5 = this.label_options) != null ? ref5.animate : void 0;
        return this.label_clips = this.segments.inherit('svg.label').options(this.label_clip_options);
      }
    };

    Icicle.prototype._draw = function(origin) {
      var prev_h, prev_zero_pos, ref, ref1, root_node, zero_pos;
      Icicle.__super__._draw.apply(this, arguments);
      prev_h = this.h.copy();
      prev_zero_pos = prev_h(0);
      if (this.root_datum != null) {
        root_node = this.nodes[this.key(this.root_datum)];
      }
      this.h.domain([(ref = root_node != null ? root_node.x1 : void 0) != null ? ref : 0, (ref1 = root_node != null ? root_node.x2 : void 0) != null ? ref1 : 1]);
      zero_pos = this.h(0);
      (origin === 'resize' ? this.rects.all : this.rects["new"]).attr('height', this.dy);
      this.rects.animate(origin === 'redraw' || origin === 'revalue' || origin === 'rebase').position({
        x: (function(_this) {
          return function(d) {
            return _this.h(_this.nodes[_this.key(d)].x1);
          };
        })(this),
        y: (function(_this) {
          return function(d) {
            return _this.v(_this.nodes[_this.key(d)].y1);
          };
        })(this),
        width: (function(_this) {
          return function(d) {
            var node;
            return _this.h((node = _this.nodes[_this.key(d)]).x2 - node.x1) - zero_pos;
          };
        })(this)
      }, {
        x: (function(_this) {
          return function(d) {
            return prev_h(_this.nodes[_this.key(d)].px1);
          };
        })(this),
        y: (function(_this) {
          return function(d) {
            return _this.v(_this.nodes[_this.key(d)].py1);
          };
        })(this),
        width: (function(_this) {
          return function(d) {
            var node;
            return prev_h((node = _this.nodes[_this.key(d)]).px2 - node.px1) - prev_zero_pos;
          };
        })(this)
      });
      if (this.label_options != null) {
        (origin === 'resize' ? this.rects.all : this.rects["new"]).attr('height', this.dy);
        this.label_clips.animate(origin === 'redraw' || origin === 'revalue' || origin === 'rebase').position({
          x: (function(_this) {
            return function(d) {
              return _this.h(_this.nodes[_this.key(d)].x1);
            };
          })(this),
          y: (function(_this) {
            return function(d) {
              return _this.v(_this.nodes[_this.key(d)].y1);
            };
          })(this),
          width: (function(_this) {
            return function(d) {
              var node;
              return _this.h((node = _this.nodes[_this.key(d)]).x2 - node.x1) - zero_pos;
            };
          })(this)
        }, {
          x: (function(_this) {
            return function(d) {
              return prev_h(_this.nodes[_this.key(d)].px1);
            };
          })(this),
          y: (function(_this) {
            return function(d) {
              return _this.v(_this.nodes[_this.key(d)].py1);
            };
          })(this),
          width: (function(_this) {
            return function(d) {
              var node;
              return prev_h((node = _this.nodes[_this.key(d)]).px2 - node.px1) - prev_zero_pos;
            };
          })(this)
        });
        this.labels = c3.select(this.label_clips.all.filter((function(_this) {
          return function(d) {
            var node;
            return _this.h((node = _this.nodes[_this.key(d)]).x2 - node.x1) - zero_pos >= 50;
          };
        })(this))).inherit('text', 'restore').options(this.label_options).update().animate(origin === 'redraw' || origin === 'revalue' || origin === 'rebase').position({
          y: this.dy / 2,
          x: (function(_this) {
            return function(d) {
              var left, node, right;
              node = _this.nodes[_this.key(d)];
              left = Math.max(node.x1, _this.h.domain()[0]);
              right = Math.min(node.x2, _this.h.domain()[1]);
              return _this.h((right - left) / 2 + (left - node.x1)) - zero_pos;
            };
          })(this)
        });
        this.segments.all.filter((function(_this) {
          return function(d) {
            var node;
            return _this.h((node = _this.nodes[_this.key(d)]).x2 - node.x1) - zero_pos < 50;
          };
        })(this)).selectAll('text').transition('fade').duration(this.label_options.duration).style('opacity', 0).remove();
      } else {
        this.segments.all.selectAll('text').remove();
        delete this.labels;
      }
      if (origin === 'resize' && (!this.rects["new"].empty() || ((this.labels != null) && !this.labels["new"].empty()))) {
        return this._style(true);
      }
    };

    Icicle.prototype._style = function(style_new) {
      var ref;
      Icicle.__super__._style.apply(this, arguments);
      this.rects.style(style_new);
      return (ref = this.labels) != null ? ref.style(style_new) : void 0;
    };

    Icicle.prototype.rebase = function(root_datum) {
      this.root_datum = root_datum;
      this.trigger('rebase_start', this.root_datum);
      this.chart.redraw('rebase');
      return this.trigger('rebase', this.root_datum);
    };

    Icicle.prototype.rebase_key = function(root_key) {
      var ref;
      return this.rebase((ref = this.nodes[root_key]) != null ? ref.datum : void 0);
    };

    return Icicle;

  })(c3.Plot.Layer.Swimlane);

  c3.Plot.Layer.Swimlane.Sampled = (function(superClass) {
    extend(Sampled, superClass);

    function Sampled() {
      this._sample = bind(this._sample, this);
      this._update = bind(this._update, this);
      this._hover_datum = bind(this._hover_datum, this);
      return Sampled.__super__.constructor.apply(this, arguments);
    }

    Sampled.version = 0.0;

    Sampled.prototype.type = 'sampled';

    Sampled.prototype.dx = null;

    Sampled.prototype.filter = void 0;

    Sampled.prototype.safe = true;

    Sampled.prototype._hover_datum = function(x, swimlane) {
      var data, datum, idx, right;
      data = this.swimlane_data[swimlane];
      right = this.h.invert(this.h(x) + 1);
      idx = d3.bisector(this.x).right(data, x) - 1;
      if (idx < 0) {
        return null;
      } else if (x < this.x(datum = data[idx]) + this.dx(datum)) {
        return datum;
      } else if (++idx < data.length && this.x(datum = data[idx]) <= right) {
        return datum;
      } else {
        return null;
      }
    };

    Sampled.prototype._update = function() {
      var bottom_edge, data, datum, i, l, len, len1, m, n, ref, ref1, ref2, ref3, ref4, results, swimlane, top_edge;
      Sampled.__super__._update.apply(this, arguments);
      this.swimlane_data = [];
      for (swimlane = l = ref = this.v.domain()[0], ref1 = this.v.domain()[1]; ref <= ref1 ? l < ref1 : l > ref1; swimlane = ref <= ref1 ? ++l : --l) {
        this.swimlane_data[swimlane] = [];
      }
      ref2 = this.v.domain(), top_edge = ref2[0], bottom_edge = ref2[1];
      ref3 = this.data;
      for (i = m = 0, len = ref3.length; m < len; i = ++m) {
        datum = ref3[i];
        if (!((this.filter == null) || this.filter(datum, i))) {
          continue;
        }
        swimlane = this.y(datum, i);
        if ((top_edge <= swimlane && swimlane < bottom_edge)) {
          this.swimlane_data[swimlane].push(datum);
        }
      }
      if (this.safe) {
        ref4 = this.swimlane_data;
        results = [];
        for (n = 0, len1 = ref4.length; n < len1; n++) {
          data = ref4[n];
          results.push(c3.array.sort_up(data, this.x));
        }
        return results;
      }
    };

    Sampled.prototype._sample = function(sample) {
      var bisector, data, datum, datum_x, idx, l, pixel, prev_idx, ref, ref1, swimlane, v, x;
      bisector = d3.bisector(this.x).right;
      for (swimlane = l = ref = this.v.domain()[0], ref1 = this.v.domain()[1]; ref <= ref1 ? l < ref1 : l > ref1; swimlane = ref <= ref1 ? ++l : --l) {
        v = this.v(swimlane);
        data = this.swimlane_data[swimlane];
        if (!data.length) {
          continue;
        }
        prev_idx = bisector(data, this.h.domain()[0]);
        if (!prev_idx) {
          pixel = Math.round(this.h(this.x(this.data[prev_idx])));
        } else {
          prev_idx--;
          pixel = this.h(this.x(this.data[prev_idx]) + this.dx(this.data[prev_idx])) > 0 ? 0 : Math.round(this.h(this.x(data[prev_idx])));
        }
        while (pixel < this.width) {
          x = this.h.invert(pixel);
          idx = prev_idx;
          while (idx < data.length) {
            datum = data[idx];
            prev_idx = idx;
            if ((datum_x = this.x(datum)) > x) {
              pixel = Math.round(this.h(datum_x));
              break;
            }
            if (x <= datum_x + this.dx(datum)) {
              break;
            }
            idx++;
          }
          if (idx === data.length) {
            break;
          }
          sample(pixel, v, datum);
          pixel++;
        }
      }
    };

    return Sampled;

  })(c3.Plot.Layer.Swimlane);

  c3.Plot.Layer.Swimlane.Sampled.SVG = (function(superClass) {
    extend(SVG, superClass);

    function SVG() {
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      return SVG.__super__.constructor.apply(this, arguments);
    }

    SVG.version = 0.0;

    SVG.prototype.type = 'svg';

    SVG.prototype.line_options = void 0;

    SVG.prototype._draw = function(origin) {
      var current_data, pixels;
      SVG.__super__._draw.apply(this, arguments);
      current_data = [];
      pixels = [];
      this._sample(function(x, y, datum) {
        current_data.push(datum);
        return pixels.push({
          x: x,
          y: y
        });
      });
      this.lines = c3.select(this.g, 'line').options(this.line_options).bind(current_data).update();
      return this.lines.position({
        x1: function(d, i) {
          return pixels[i].x + 0.5;
        },
        x2: function(d, i) {
          return pixels[i].x + 0.5;
        },
        y1: this.y == null ? 0 : function(d, i) {
          return pixels[i].y - 0.5;
        },
        y2: this.y == null ? this.height : (function(_this) {
          return function(d, i) {
            return pixels[i].y + _this.dy - 0.5;
          };
        })(this)
      });
    };

    SVG.prototype._style = function() {
      SVG.__super__._style.apply(this, arguments);
      return this.lines.style();
    };

    return SVG;

  })(c3.Plot.Layer.Swimlane.Sampled);

  c3.Plot.Layer.Swimlane.Sampled.Canvas = (function(superClass) {
    extend(Canvas, superClass);

    function Canvas() {
      this.zoom = bind(this.zoom, this);
      this._style = bind(this._style, this);
      this._draw = bind(this._draw, this);
      this.__draw = bind(this.__draw, this);
      this._size = bind(this._size, this);
      this._init = bind(this._init, this);
      return Canvas.__super__.constructor.apply(this, arguments);
    }

    Canvas.version = 0.0;

    Canvas.prototype.type = 'canvas';

    Canvas.prototype.line_options = void 0;

    Canvas.prototype._init = function() {
      var foreignObject;
      Canvas.__super__._init.apply(this, arguments);
      foreignObject = c3.select(this.g, 'foreignObject').singleton().position({
        height: '100%',
        width: '100%'
      });
      return this.canvas = foreignObject.select('xhtml|canvas').singleton();
    };

    Canvas.prototype._size = function() {
      Canvas.__super__._size.apply(this, arguments);
      return this.canvas.position({
        height: this.height,
        width: this.width
      });
    };

    Canvas.prototype.__draw = function() {
      var context, ref, ref1, stroke;
      context = this.canvas.node().getContext('2d');
      context.clearRect(0, 0, this.width, this.height);
      context.translate(0.5, 0.5);
      stroke = c3.functor((ref = this.line_options) != null ? (ref1 = ref.styles) != null ? ref1.stroke : void 0 : void 0);
      this._sample((function(_this) {
        return function(x, y, datum) {
          context.beginPath();
          context.moveTo(x, y);
          context.lineTo(x, y + _this.dy);
          context.strokeStyle = stroke(datum);
          return context.stroke();
        };
      })(this));
      return context.translate(-0.5, -0.5);
    };

    Canvas.prototype._draw = function(origin) {
      Canvas.__super__._draw.apply(this, arguments);
      return this.__draw(origin);
    };

    Canvas.prototype._style = function(style_new) {
      Canvas.__super__._style.apply(this, arguments);
      if (!style_new) {
        return this.__draw('restyle');
      }
    };

    Canvas.prototype.zoom = function() {
      return this.__draw('zoom');
    };

    return Canvas;

  })(c3.Plot.Layer.Swimlane.Sampled);

}).call(this);

//# sourceMappingURL=c3-layers.js.map
